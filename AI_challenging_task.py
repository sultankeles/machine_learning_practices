# -*- coding: utf-8 -*-
"""AI_Challenging_Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OucLmbwF90xBi4OOa8nvf3qEA7l4BFci
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import BaggingClassifier, ExtraTreesClassifier, VotingClassifier, StackingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

df = pd.read_excel('heart_dataset_complete.xlsx')

df.head()

X = df.iloc[:, 0:2].values # features
y = df.iloc[:, 2].values  # target

"""#### Train - Test Split"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)

"""#### Support Vector Classifier (SVC)"""

svm = SVC()

# Training
svm.fit(X_train, y_train)

# Prediction
y_pred = svm.predict(X_test)

# Calculating accuracy, precision, recall, f1-score
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted') # Used 'weighted' for multiclass targets
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1-score: ', f1)

# Confusion Matrix
con_mtr = confusion_matrix(y_test, y_pred)
print('Confusion Matrix: \n', con_mtr)

"""#### Logistic Regression"""

import warnings
warnings.filterwarnings('ignore')

log_reg = LogisticRegression()

log_reg.fit(X_train, y_train)

y_pred = log_reg.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
con_mtr = confusion_matrix(y_test, y_pred)

print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1-score: ', f1)
print('Confusion Matrix: \n', con_mtr)

"""#### Decision Tree Classifier"""

dt = DecisionTreeClassifier()

dt.fit(X_train, y_train)

y_pred = dt.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
con_mtr = confusion_matrix(y_test, y_pred)

print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1-score: ', f1)
print('Confusion Matrix: \n', con_mtr)

"""#### K-Nearest Neighbor (KNN)"""

knn = KNeighborsClassifier()

knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
con_mtr = confusion_matrix(y_test, y_pred)

print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1-score: ', f1)
print('Confusion Matrix: \n', con_mtr)

"""#### Creating a Voting Classifier"""

model_list = [('SVC', svm), ('Logistic Regression', log_reg), ('Decision Tree', dt), ('KNN', knn)]

vot_clf = VotingClassifier(estimators = model_list, n_jobs = -1) # n_jobs = -1 : Use all available CPU cores for parallel processing

vot_clf.fit(X_train, y_train)

y_pred = vot_clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
con_mtr = confusion_matrix(y_test, y_pred)

print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1-score: ', f1)
print('Confusion Matrix: \n', con_mtr)

"""#### Bagging"""

bag_clf = BaggingClassifier(estimator = dt, n_estimators = 9)

bag_clf.fit(X_train, y_train)

y_pred = bag_clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
con_mtr = confusion_matrix(y_test, y_pred)

print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1-score: ', f1)
print('Confusion Matrix: \n', con_mtr)

"""#### Stacking"""

base_clf = [('svm', SVC()), ('log_reg', LogisticRegression()), ('dt', DecisionTreeClassifier()), ('knn', KNeighborsClassifier())]

stack_clf = StackingClassifier(estimators = base_clf, final_estimator = SVC(), cv = 5)  # cv: cross-validation

stack_clf.fit(X_train, y_train)

y_pred = stack_clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
con_mtr = confusion_matrix(y_test, y_pred)

print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1-score: ', f1)
print('Confusion Matrix: \n', con_mtr)

from sklearn.model_selection import StratifiedKFold, cross_val_score

s_clf = StackingClassifier(estimators = base_clf, final_estimator = SVC())

cv = StratifiedKFold(n_splits = 5)

scores = cross_val_score(s_clf, X_train, y_train, cv=cv, scoring='accuracy')

print("Cross-Validation Scores: ", scores)
print("Mean Accuracy: ", scores.mean())

"""#### AdaBoost Classifier (Adaptive Boosting)"""

ada_clf = AdaBoostClassifier(n_estimators = 10)

ada_clf.fit(X_train, y_train)

y_pred = ada_clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
con_mtr = confusion_matrix(y_test, y_pred)

print('Accuracy: ', accuracy)
print('Precision: ', precision)
print('Recall: ', recall)
print('F1-score: ', f1)
print('Confusion Matrix: \n', con_mtr)